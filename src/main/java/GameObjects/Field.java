package GameObjects;

import GameObjects.noughtsAndCrosses.DrawFigure;

/**
 * Класс Field, это просто ячейка на игровом поле. Эта ячейка будет восприниматься, как точка, без ширины и длины.
 * Тоесть она будет содеражать свои координаты x и y, отличные от координат игрового поля(GameMap)
 * Чтобы перевести координаты Field в координаты GameMap, достаточно будет просто каждую координату умножить на размер ячейки
 * Тоесть x=x*size, y=y*size;
 * Это сделано для того, чтобы потом было удобней рисовать грани ячеейки, если на нее наведен курсор.
 * Типа как в веселой ферме, когда наводим на грядку, она выделяется курсивом, тут тоже самое
 *
 * Поле size (размер всех ячеек) пусть хранится в классе GameMap, чтобы для всех Field был один размер, а не для каждого свой
 *
 * Ну вроде все
 * Причем
 * @autor Viteker
 * @version 1.0
 *
 * !!! Замечание - Вроде тест не нужен и так все понятно
 */
public class Field {
    private final int x,y;
    private DrawFigure figure;


    /**
     * Единственный нужный конструктор, который устанавливает неизменные координаты ячейки поля
     * @param x - координата x ячеейки, с учетом, что она уже преобразованна в  координату Field, а не GameMap
     * @param y- координата y ячеейки, с учетом, что она уже преобразованна в  координату Field, а не GameMap
     */
    public Field(int x,int y){
        this.x=x; this.y=y;
    }

    /**
     *
     * @return Возвращает данную фигуру в этой ячейке, тоесть либо нолик, либо крестик
     */
    public DrawFigure getFigure() {
        return figure;
    }

    /**
     *
     * @param figure - устанавливаем в этой фигуре либо ноль, либо крестик
     */
    public void setFigure(DrawFigure figure) {
        this.figure = figure;
    }

    /**
     * @return координата x
     */
    public int getX() {
        return x;
    }

    /**
     *
     * @return координата y
     */
    public int getY() {
        return y;
    }
}
